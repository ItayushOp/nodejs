// Importing required modules
const express = require('express');
const bodyParser = require('body-parser');
const { exec } = require('child_process');
const path = require('path');

// Initialize Express app
const app = express();
const PORT = process.env.PORT || 4000;

// Middleware
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// Route to handle execution of code
app.post('/execute', (req, res) => {
    const { language, code } = req.body;

    if (!language || !code) {
        return res.status(400).json({ error: 'Language and code are required' });
    }

    // File and command setup based on language
    const tempFileName = `temp_code.${language === 'javascript' ? 'js' : language}`;
    const fs = require('fs');
    fs.writeFileSync(tempFileName, code);

    let command = '';
    switch (language) {
        case 'javascript':
            command = `node ${tempFileName}`;
            break;
        case 'python':
            command = `python3 ${tempFileName}`;
            break;
        case 'c':
            command = `gcc ${tempFileName} -o temp_code && ./temp_code`;
            break;
        case 'cpp':
            command = `g++ ${tempFileName} -o temp_code && ./temp_code`;
            break;
        default:
            return res.status(400).json({ error: `Unsupported language: ${language}` });
    }

    // Execute the code
    exec(command, (err, stdout, stderr) => {
        // Clean up the temporary file
        fs.unlinkSync(tempFileName);
        if (fs.existsSync('temp_code')) fs.unlinkSync('temp_code');

        if (err) {
            return res.status(500).json({ error: stderr || err.message });
        }

        res.json({ output: stdout });
    });
});

// Homepage route
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Start server
app.listen(PORT, () => {
    console.log(`Code server running at http://localhost:${PORT}`);
});
